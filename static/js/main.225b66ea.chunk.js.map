{"version":3,"sources":["components/BinaryGap.js","components/UI/Style.js","components/UI/InfoModal.js","components/UI/Backdrop.js","components/BGInput.js","App.js","index.js"],"names":["BinaryGap","props","binaryString","number","toString","tempCounter","zeroCounter","i","length","onInput","Card","styled","div","Form","form","Results","Main","body","Modal","Footer","footer","StyledBackdrop","InfoModal","Backdrop","onClick","BGInput","useState","enteredNumber","setEnteredNumber","setBinaryString","setZeroCounter","displayModal","setDisplayModal","console","log","className","type","onChange","event","target","value","preventDefault","Math","floor","random","href","xmlns","viewBox","width","height","d","App","ReactDOM","render","document","getElementById"],"mappings":"sKAsBeA,EAtBG,SAACC,GAKjB,IAJA,IAAMC,EAAeD,EAAME,OAAOC,SAAS,GACvCC,EAAc,EACdC,EAAc,EAETC,EAAI,EAAGA,EAAIL,EAAaM,OAAQD,IACf,MAApBL,EAAaK,IACfF,IAEsB,MAApBH,EAAaK,KACXF,EAAcC,IAChBA,EAAcD,GAEhBA,EAAc,GAMlB,OAFAJ,EAAMQ,QAAQP,EAAcI,GAErB,M,cCjBII,EAAOC,IAAOC,IAAV,sNAWJC,EAAOF,IAAOG,KAAV,o8BAiDJC,EAAUJ,IAAOC,IAAV,4LAcPI,EAAOL,IAAOM,KAAV,qRAgBJC,EAAQP,IAAOC,IAAV,gPAYLO,EAASR,IAAOS,OAAV,kMAcNC,EAAiBV,IAAOC,IAAV,kK,OCxGZU,EAXG,WACd,OAAQ,eAACJ,EAAD,WACJ,wDAGA,oGACA,oMACA,oECJOK,EAJE,SAACtB,GACd,OAAO,cAACoB,EAAD,CAAgBG,QAASvB,EAAMuB,WC4F3BC,EAzFC,WACd,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAwCF,mBAAS,GAAjD,mBAAOxB,EAAP,KAAqB2B,EAArB,KACA,EAAsCH,mBAAS,GAA/C,mBAAOpB,EAAP,KAAoBwB,EAApB,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KA0BA,OAFAC,QAAQC,IAAIhC,GAGV,qCACE,4CACC6B,GAAiB,cAAC,EAAD,IACjBA,GAAiB,cAAC,EAAD,CAAUP,QAxBN,WACxBQ,GAAgB,MAwBd,cAACtB,EAAD,UACE,eAACG,EAAD,WACE,sBAAKsB,UAAU,eAAf,8BAEE,uBACEA,UAAU,QACVC,KAAK,SACLC,SA5BS,SAACC,GACpBV,GAAkBU,EAAMC,OAAOC,QA4BrBA,MAAOb,GAAiB,QAG5B,wBAAQQ,UAAU,iBAAiBX,QA5BrB,SAACc,GACrBA,EAAMG,iBACNb,EAAiBc,KAAKC,MAAsB,IAAhBD,KAAKE,YA0B3B,yBAKJ,cAAC,EAAD,CAAWzC,OAAQwB,EAAelB,QA5BlB,SAACP,EAAcI,GACjCuB,EAAgB3B,GAChB4B,EAAexB,MA2Bb,eAACS,EAAD,WACE,2DACA,6BAAKb,IACL,2DACA,6BAAKI,OAEP,eAACa,EAAD,WACE,mBAAG0B,KAAK,6CAA6CN,OAAO,SAA5D,SACA,qBACEO,MAAM,6BACNC,QAAQ,YACRC,MAAM,KACNC,OAAO,KAJT,SAME,sBACE,YAAU,UACVC,EAAE,ikBAIN,qBACA1B,QAnEmB,WACvBQ,GAAgB,IAmEZc,MAAM,6BACNC,QAAQ,YACRC,MAAM,KACNC,OAAO,KALP,SAOA,sBACE,YAAU,UACVC,EAAE,+OC5EGC,MARf,WACE,OACE,cAACnC,EAAD,UACE,cAAC,EAAD,OCFNoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.225b66ea.chunk.js","sourcesContent":["const BinaryGap = (props) => {\n  const binaryString = props.number.toString(2);\n  let tempCounter = 0;\n  let zeroCounter = 0;\n\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString[i] === \"0\") {\n      tempCounter++;\n    }\n    if (binaryString[i] === \"1\") {\n      if (tempCounter > zeroCounter) {\n        zeroCounter = tempCounter;\n      }\n      tempCounter = 0;\n    }\n  }\n\n  props.onInput(binaryString, zeroCounter)\n\n  return null\n};\n\nexport default BinaryGap;\n","import styled from \"styled-components\";\n\nexport const Card = styled.div`\n  display: block;\n  background: whitesmoke;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  border-radius: 10px;\n  padding: 10px;\n  margin: auto;\n  width: 500px;\n  height: 125px;\n`;\n\nexport const Form = styled.form`\n  input {\n    display: block;\n    width: 80%;\n    border-style: solid;\n    border-width: 2px;\n    border-radius: 10px;\n    border-color: #00bdec;\n    text-align: center;\n    height: 20px;\n    padding: 5px;\n    background-color: white;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 10px;\n    font-size: 15px;\n    outline: none;\n  }\n\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    appearance: none;\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  div {\n    font-size: 30px;\n    text-align: center;\n  }\n\n  button {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 10px;\n    padding: 10px;\n    border-width: 0px;\n    border-radius: 10px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n    background-color: white;\n    font-size: 15px;\n  }\n  button:hover {\n    background-color: #00bdec;\n    color: white;\n  }\n`;\n\nexport const Results = styled.div`\n  h3 {\n    color: white;\n    text-align: center;\n    font-size: 30px;\n  }\n\n  h4 {\n    color: white;\n    text-align: center;\n    font-size: 25px;\n  }\n`;\n\nexport const Main = styled.body`\n  height: 100vh;\n  min-height: 100vh;\n  background-color: #00bdec;\n  margin: 0;\n  font-family: \"Roboto Condensed\", sans-serif;\n\n  h1 {\n    color: white;\n    font-size: 50px;\n    text-align: center;\n    margin: 0;\n    padding: 30px;\n  }\n`;\n\nexport const Modal = styled.div`\nbox-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);\nborder-radius: 6px;\nbackground-color: white;\npadding: 1rem;\ntext-align: center;\nwidth: 30rem;\nz-index: 10;\nposition: fixed;\ntop: 20vh;\nleft: calc(50% - 15rem);\n`;\nexport const Footer = styled.footer`\ntext-align: center;\n  svg {\n    padding-left: 15px;\n    padding-right: 15px;\n    margin-top: 44vh;\n    fill: white;\n  }\n\n  svg:hover {\n    fill: grey;\n  }\n`;\n\nexport const StyledBackdrop = styled.div`\n  position: fixed;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.75);\n  width: 100%;\n  height: 100vh;\n  top: 0;\n  left: 0;\n`\n","\nimport { Modal } from \"./Style\";\n\nconst InfoModal = () => {\n    return (<Modal>\n        <h3>\n            The Binary Gap Problem\n        </h3>\n        <p>This is a React project based on finding the binary gap of a number</p> \n        <p> The idea of this is to take input and convert it into a binary sequence. the program then will count the number of concurrent 0's that are located in between 1's.</p> \n        <p>EX: 10010 has a Binary gap of 2</p>\n    </Modal>)\n}\n\nexport default InfoModal;","import { StyledBackdrop } from \"./Style\";\n\nconst Backdrop = (props) => {\n    return <StyledBackdrop onClick={props.onClick} />;\n}\n\nexport default Backdrop;","import { useState } from \"react\";\nimport BinaryGap from \"./BinaryGap\";\nimport InfoModal from \"./UI/InfoModal\";\nimport Backdrop from \"./UI/Backdrop\";\nimport { Card, Form, Results, Modal, Footer } from \"./UI/Style\";\n\nconst BGInput = () => {\n  const [enteredNumber, setEnteredNumber] = useState(\"\");\n  const [binaryString, setBinaryString] = useState(0);\n  const [zeroCounter, setZeroCounter] = useState(0);\n  const [displayModal, setDisplayModal] = useState(false);\n\n  const openModalHandler = () => {\n    setDisplayModal(true)\n  }\n\n  const closeModalHandler = () => {\n    setDisplayModal(false)\n  }\n\n  const inputHandler = (event) => {\n    setEnteredNumber(+event.target.value);\n  };\n\n  const randomHandler = (event) => {\n    event.preventDefault();\n    setEnteredNumber(Math.floor(Math.random() * 1000));\n  };\n\n  const inputHelper = (binaryString, zeroCounter) => {\n    setBinaryString(binaryString);\n    setZeroCounter(zeroCounter);\n  };\n\n  console.log(binaryString);\n\n  return (\n    <>\n      <h1>Binary Gap</h1>\n      {displayModal && (<InfoModal/>)}\n      {displayModal && (<Backdrop onClick={closeModalHandler}/>)}\n      <Card>\n        <Form>\n          <div className=\"input__label\">\n            Input Your Number\n            <input\n              className=\"input\"\n              type=\"number\"\n              onChange={inputHandler}\n              value={enteredNumber || \"\"}\n            />\n          </div>\n          <button className=\"submit__button\" onClick={randomHandler}>\n            Random\n          </button>\n        </Form>\n      </Card>\n      <BinaryGap number={enteredNumber} onInput={inputHelper} />\n      <Results>\n        <h3>Your Binary Conversion Is</h3>\n        <h4>{binaryString}</h4>\n        <h3>Which Has a Binary Gap of</h3>\n        <h4>{zeroCounter}</h4>\n      </Results>\n      <Footer>\n        <a href=\"https://github.com/NicklSmith95/Binary-Gap\" target=\"_blank\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 16 16\"\n          width=\"25\"\n          height=\"25\"\n        >\n          <path\n            fill-rule=\"evenodd\"\n            d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"\n          ></path>\n        </svg>\n        </a>\n        <svg\n        onClick={openModalHandler}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 16 16\"\n        width=\"25\"\n        height=\"25\"\n      >\n        <path\n          fill-rule=\"evenodd\"\n          d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"\n        ></path>\n      </svg>\n      </Footer>\n    </>\n  );\n};\n\nexport default BGInput;\n","import BGInput from \"./components/BGInput\";\nimport { Main } from './components/UI/Style'\n\nfunction App() {\n  return (\n    <Main>\n      <BGInput />\n    </Main>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}